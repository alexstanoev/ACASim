; num elements
MOVI 0 30 R0

; vec 1 base
MOVI 0 0 RF0

; vec 2 base
MOVI 0 40 RF1

; sum base
MOVI 0 80 R1

; sum arrays
SPC 2 RA
JI %vecadd

; print sorted arr (base R1)
SPC 2 RA
JI %printArr

HALT

vecadd:
	; loop counter R3
	XOR R3 R3 R3
	
	vecLoop:
		; first int
		LD RF0 R3 R4
		; second int
		LD RF1 R3 R5
	
		; sum
		ADD R4 R5 R6
		
		; compute dest
		ADD R1 R3 R2
		; store
		STO R6 R2 0
	
		; R3++
		ADDI R3 1 R7
		ADDI R7 0 R3

		; if R3 < iter go back
		CMP R3 R0 R7
		BLTZ R7 %vecLoop
	; return to caller
	J RA

printArr:
	; num iterations
	ADDI R0 0 R2
	; offset
	XOR R3 R3 R3
	printArrLoop:
		; get int at mem[base + offset]
		LD R1 R3 R4
		; print
		SYS R4
	
		; offset++
		ADDI R3 1 R4
		ADDI R4 0 R3
	
		; loop
	    SUBI R2 1 R4
	    ADDI R4 0 R2
	    BGZ R4 %printArrLoop

    ; return to caller
    J RA