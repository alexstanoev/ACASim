; fib.aca
; ported from https://gist.github.com/LibertyLocked/068b118354539a8be992

; set up stack
MOVI 0 0xFF RSP

; initial function arg
MOVI 0 20 RF0
; print it
SYS RF0

; Call fibonacci
SPC 2 RA
JI %fibonacci

; print return value
SYS RV0
HALT

; functions
fibonacci:
	; Prologue
	; alloc 12 bytes from SP
	SUBI RSP 3 R2
	ADDI R2 0 RSP
	
	; push RA, RS0, RS1
	STO RA RSP 2
	STO RS0 RSP 1
	STO RS1 RSP 0
	
	;SYS RSP
	
	; copy arg to RS0
	ADDI RF0 0 RS0
	; 1 - return value for terminal condition
	MOVI 0 1 RV0

	; check terminal condition
	MOVI 0 2 R2
	CMP R2 RS0 R3
	BGEZ R3 %fibonacciExit
	
	; set args for recursive call to f(n-1)
	SUBI RS0 1 RF0
	
	; call fib
	SPC 2 RA
	JI %fibonacci

	; store result of f(n-1) to s1
	ADDI RV0 0 RS1

	; set args for recursive call to f(n-2)
	SUBI RS0 2 RF0
	
	; call fib
	SPC 2 RA
	JI %fibonacci

	; add result of f(n-1) to it
	ADD RV0 RS1 R2
	ADDI R2 0 RV0

fibonacciExit:
	; Epilogue
	
	; pop RA, RS0, RS1
	LDO RA RSP 2
	LDO RS0 RSP 1
	LDO RS1 RSP 0
	
	; unallocate stack
	ADDI RSP 3 R2
	ADDI R2 0 RSP

	; return
	J RA